// schema.prisma (Prisma + PostgreSQL)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Organization {
  id        String  @id @default(uuid())
  name      String
  domain    String?
  createdAt DateTime @default(now())
  users     User[]
}

model User {
  id              String   @id @default(uuid())
  orgId           String?
  org             Organization? @relation(fields: [orgId], references: [id])
  email           String   @db.Text
  passwordHash    String   @db.Text
  firstName       String?
  lastName        String?
  role            Role     @default(MEMBER)
  emailVerifiedAt DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  sessions        Session[]
  tokens          VerificationToken[]

  @@unique([email]) // Normalize to lowercase in app code for CI uniqueness
}

enum Role {
  ADMIN
  MEMBER
}

model VerificationToken {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        TokenType
  tokenHash   String   @db.Text
  expiresAt   DateTime
  consumedAt  DateTime?
  createdAt   DateTime @default(now())

  @@unique([tokenHash])
}

enum TokenType {
  EMAIL_VERIFY
  PASSWORD_RESET
}

model Session {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionTokenHash String   @db.Text
  ip               String?
  userAgent        String?
  createdAt        DateTime @default(now())
  expiresAt        DateTime
  revokedAt        DateTime?

  @@unique([sessionTokenHash])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action    String
  details   Json?
  ip        String?
  createdAt DateTime @default(now())
}
